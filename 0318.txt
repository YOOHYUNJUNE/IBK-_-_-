1. localhost:8080/#/LD/LD0105M0 에서 #
 - 프래그먼트식별자. 주소 뒤부분은 클라측에서만 해석(서버전달X)
 - 페이지 새로고침하지 않고도 URL 변경 가능
 - 주로 SPA에서 사용: 클라에서 직접 처리해서 서버 부담 경감, 구형 브라우저 호환성

router.js의
const router = createRouter({
  history: createWebHashHistory(),  // ✅ 해시 라우팅을 사용하도록 설정
  routes: [],
});

2. Controller에서 @GetMapping하지 않아도 되는 이유
 - Vue.js에서 사이드 라우팅: 클라에서 URL처리하고, 서버는 모든 요청을 같은 페이지로 보냄
 - .html파일, .js파일 만으로 접속 가능
 - html: 페이지의 구성과 스타일 정의 / ag-grid테이블을 사용해 데이터를 보여줄 공간 설정
 - .js: Vue.js로 동작하는 컴포넌트 로딩 및 동적 데이터 처리(이벤트 처리 함수 등)

3. LD0105M0.js 조회 함수
 - global.MyGrid.loadGridData({ ... }) : global.MyGrid는 전역 객체 global에 있는 MyGrid객체의 loadGridData메서드 호출
	- loadGridData: 그리드에 데이터를 로드하는 메소드
 - gridState.grids.grid1 : 어떤 그리드에 데이터를 로드할 것인지 지정
 - fetchUrl: '/api/LD/LD0105/searchList' 주소로 요청을 보내서 데이터를 받아옴

4. LD0105M0.js > onMounted 함수
 - Vue3에서 제공하는 Composition API함수. 컴포넌트가 DOM에 삽입된 후 실행되는 로직
 - 컴포넌트의 초기화, 외부 데이터 요청, DOM요소와의 상호작용 등을 설정
 - global.MyGrid.createGrid 함수를 호출해 #ag-grid-table이라는 ID의 HTML요소에 그리드 생성
 - gridOptions:  
	- paginationPageSize: 3 / 한 페이지에 3개의 데이터만 표시
	- paginationPageSizeSelector: [3, 6, 9] / 사용자가 페이지당 표시할 항목 수 3,6,9 선택 가능


## 동기, 비동기(async, await:비동기 작업이 완료될 때까지 기다리는 역할), 프로미스(promise)




